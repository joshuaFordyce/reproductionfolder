# 1. Find and Replace <your-name> with your name seperated with a dash (ex. kyle-payne).
# 2. Replace <your_dbs_endpoint> with your RDS instance endpoint 
#    (AWS ex. kyle-payne-bootcamp.cs8j7iukogcy.us-east-2.rds.amazonaws.com)
#    (Azure ex. kyle-payne-bootcamp.postgres.database.azure.com)

# Name of the k8s Secret holding the Starburst License file
starburstPlatformLicense: starburstdata1

# The enviroment setting is what you'll see on the main Web UI for the ENVIRONMENT name.
# The sharedSecret is not a k8s Secret it is what the coordinator and worker will use
# to confirm internal communications. More can be found in the SEP doc on this.
environment: joshua_fordyce_lab01
sharedSecret: u70Qhhw9PsZmEgIo7Zqg3kIj3AJZ5/Mnyy5iyjcsgnceM+SSV+APSTisjlFVH

# As a starting best practice always set the requests and limits memmory and CPU to the same thing.
coordinator:
  replicas: 1
  resources:
    requests:
      memory: "12Gi"
      cpu: 3
    limits:
      memory: "12Gi"

  # This affinity will ensure the coordinator and worker are deployed in the sep node group.
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: apps
            operator: In
            values: 
            - sep

# The tollerance in this YAML is specifically for Azure so it could be removed or commented out
#    for other clouds. However, it also won't hurt to leave since it is just saying to allow somethign
#    if a taint exists and when it doesn't the tollerance does nothing.
  tolerations:
    - key: "kubernetes.azure.com/scalesetpriority"
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"

  etcFiles:
    properties:
      cache.properties: |
        service-database.user=postgres
        service-database.password=StarburstR0cks!
        service-database.jdbc-url=jdbc:postgresql://joshua-fordyce-bootcamp.cs8j7iukogcy.us-east-2.rds.amazonaws.com:5432/eks_redirections
        starburst.user=caching_service
        starburst.password=StarburstR0cks!
        starburst.jdbc-url=jdbc:trino://coordinator:8080
        rules.file=secretRef:cache-rules:cache-rules.json
        rules.refresh-period=1m
        refresh-initial-delay=1m
        refresh-interval=2m
      log.properties: |
        io.trino=DEBUG
  additionalProperties: |
    http-server.authentication.allow-insecure-over-http=true
    http-server.process-forwarded=true
    insights.persistence-enabled=true 
    insights.metrics-persistence-enabled=true
    insights.jdbc.url=jdbc:postgresql://joshua-fordyce-bootcamp.cs8j7iukogcy.us-east-2.rds.amazonaws.com:5432/eks_query_logger
    insights.jdbc.user=postgres
    insights.data-retention.max-age=5m
    insights.jdbc.password=StarburstR0cks!
    #insights.authorized-users=starburst_service
    #insights.authorization.force=true
    starburst.access-control.enabled=true
    starburst.access-control.audit.enabled=true
    starburst.access-control.audit.access-log.enabled=true
    starburst.access-control.authorized-users=starburst_service
    #The following is for Data Products
    # The following is for Data Products
    #starburst.data-product.enabled=true
    #data-product.starburst-jdbc-url=jdbc:trino://coordinator:8080
    #data-product.starburst-user=dataproducts_service
    #data-product.starburst-password=

userDatabase:
  enabled: true
  users:
     - username: admin
       password: StarburstR0cks!
     - username: starburst
       password: StarburstR0cks!
     - username: starburst_service
       password: StarburstR0cks!
     - username: caching_service
       password: StarburstR0cks!
     - username: dataproducts_service
       password: StarburstR0cks!
     - username: analyst
       password: StarburstR0cks!
     - username: katie
       password: StarburstR0cks!
     - username: erin
       password: StarburstR0cks!
     - username: aaron
       password: StarburstR0cks!
     - username: john
       password: StarburstR0cks!
     - username: jon
       password: StarburstR0cks!

    
  
expose:
  type: "loadBalancer"
  loadBalancer:
    name: "starburst"
    ports:
      http:
        port: 8080
# If you want the LB to have an internal IP and not a public facing one remove the comment below for the
#  annoticatios line and the line for your cloud.
#    annotations: 
#      service.beta.kubernetes.io/aws-load-balancer-internal: "true"
#      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
#      networking.gke.io/load-balancer-type: "Internal"

worker:
  autoscaling:
    #edit this out to roll back your changes
    #replicas: 1
    enabled: true
    minReplicas: 0
    maxReplicas: 0

    targetCPUUtilizationPercentage: 50
  # The deploymentTerminatinoGracePeriodSeconds controls how long the worker waits before beginning the graceful shutdown process.
  # The following values were lowered from their defautls for lab settings so when you run a helm upgrade or scale down it doesn't take so long. 
  deploymentTerminationGracePeriodSeconds: 10 # default is 300; it is actually how long the graceful shutdown waits after it receives the SIGTERM
  starburstWorkerShutdownGracePeriodSeconds: 120 # default is 120
  resources:
    requests:
      memory: "12Gi"
      cpu: 3
    limits:
      memory: "12Gi"
      #edits for Asurion reproduction


  # This affinity will ensure the coordinator and worker are deployed in the sep node group.
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: apps
            operator: In
            values: 
            - sep

# The tollerance in this YAML is specifically for Azure so it could be removed or commented out
#    for other clouds. However, it also won't hurt to leave since it is just saying to allow somethign
#    if a taint exists and when it doesn't the tollerance does nothing.
  tolerations:
    - key: "kubernetes.azure.com/scalesetpriority"
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"